#!/usr/bin/env bash
# overall distro module for ADSB.lol image
# <Description what this module does>
# Written by Dirk Hohndel <dirk@hohndel.org>
# GPL V3
########


# Source error handling, leave this in place
set -x
set -e

source /common.sh
install_cleanup_trap

unpack /filesystem/root /

echo "building on $(hostname) - available disk space inside the image:"
df -h
mount
echo "127.0.1.1 $(hostname)" 2>/dev/null >> /etc/hosts

# brute force set up an authorized_keys file for root
mkdir -p ~root/.ssh
echo "$SSH_PUB_KEY" >> ~root/.ssh/authorized_keys
echo "$SSH_PUB_KEY" > ~root/.ssh/adsb.im.installkey
touch /opt/adsb/adsb.im.passwd.and.keys

# setup Python/Flask
apt-get update --allow-releaseinfo-change

if grep -q "bullseye" /etc/os-release ; then
	# for older Debian the packaged flask is still v1 and too old for our code
	# on the flipside, bullseye still allows us to use pip to install
	# systemwide packages - so let's do it this way
	apt-get install -y --no-install-recommends python3 python3-pip chrony
	pip install --no-cache-dir -r /opt/adsb/adsb-setup/requirements.txt
	ln -s /usr/local/bin/flask /usr/bin
	if [ "$BASE_DISTRO" = "raspbian" ] ; then
		# for Dozzle to work, Raspbian needs a slightly modified command.txt
		sed -i 's/rootwait/rootwait cgroup_enable=cpuset cgroup_enable=memory cgroup_memory=1/' /boot/cmdline.txt
	fi
else
	apt-get install -y --no-install-recommends python3 python3-flask python3-requests chrony
fi

if [ "$FEEDER_IMAGE_NAME" != "" ] ; then
	echo "$FEEDER_IMAGE_NAME" > /opt/adsb/feeder-image.name
else
	echo "custom built feeder image" > /opt/adsb/feeder-image.name
fi
echo "Using feeder image name $(cat /opt/adsb/feeder-image.name)"

if grep -q "^diet" /etc/dist_variant ; then
	# oh, lots of things things are different here...
	sed -i "s/AUTO_SETUP_LOCALE=.*/AUTO_SETUP_LOCALE=en_US.UTF-8/" /boot/dietpi.txt
	sed -i "s/AUTO_SETUP_KEYBOARD_LAYOUT=.*/AUTO_SETUP_KEYBOARD_LAYOUT=us/" /boot/dietpi.txt
	sed -i "s/AUTO_SETUP_NET_HOSTNAME=.*/AUTO_SETUP_NET_HOSTNAME=adsb-feeder/" /boot/dietpi.txt
	sed -i "s/AUTO_SETUP_HEADLESS=.*/AUTO_SETUP_HEADLESS=1/" /boot/dietpi.txt
	sed -i "s/AUTO_SETUP_AUTOMATED=.*/AUTO_SETUP_AUTOMATED=1/" /boot/dietpi.txt
	sed -i "s/AUTO_SETUP_GLOBAL_PASSWORD=.*/AUTO_SETUP_GLOBAL_PASSWORD=${ROOT_PWD}/" /boot/dietpi.txt
	sed -i "s/SURVEY_OPTED_IN=.*/SURVEY_OPTED_IN=0/" /boot/dietpi.txt
	sed -i "s/CONFIG_NTP_MODE=.*/CONFIG_NTP_MODE=4/" /boot/dietpi.txt
	sed -i "s/CONFIG_SERIAL_CONSOLE_ENABLE=.*/CONFIG_SERIAL_CONSOLE_ENABLE=0/" /boot/dietpi.txt
	# sed -i "s/AUTO_SETUP_NET_WIFI_ENABLED=.*/AUTO_SETUP_NET_WIFI_ENABLED=1/" /boot/dietpi.txt
	# sed -i "s/AUTO_SETUP_NET_WIFI_COUNTRY_CODE=.*B/AUTO_SETUP_NET_WIFI_COUNTRY_CODE=US/" /boot/dietpi.txt

	# get rid of the silly "NO_NAME" label for the boot partition
	if [ "$(df /boot | tail -1 | grep '/boot$')" != "" ] ; then
		BOOT_DEVICE=$(df --output=source /boot | tail -1)
		fatlabel "$BOOT_DEVICE" ADSB-FEEDER
	fi

	# make sure we have an ntp server defined
	if ! grep ^NTP= /etc/systemd/timesyncd.conf ; then
		echo "NTP=0.debian.pool.ntp.org 1.debian.pool.ntp.org 2.debian.pool.ntp.org 3.debian.pool.ntp.org" >> /etc/systemd/timesyncd.conf
	fi
	# on DietPi based distros, the wpa-supplicant file that CustomPiOS
	# installs makes no sense, so let's remove it here
	# on the other distros, the README makes no sense, so remove that :)
	rm -f /boot/"${DIST_NAME,,}"-wpa-supplicant.txt
else
	rm -f /boot/ADSB-README.txt
fi

if [ "$NATIVE_DIETPI" != "1" ] ; then
	# Install dependencies
	apt-get update
	apt-get install -y gnupg

	# install zerotier and tailscale, first get their repo

	DEBIAN_DISTRO=$(head -1 /etc/apt/sources.list | cut -d\  -f 3)
	echo "deb http://download.zerotier.com/debian/${DEBIAN_DISTRO} ${DEBIAN_DISTRO} main" > /etc/apt/sources.list.d/zerotier.list
	curl -fsSL "https://pkgs.tailscale.com/stable/debian/${DEBIAN_DISTRO}.noarmor.gpg" | sudo tee /usr/share/keyrings/tailscale-archive-keyring.gpg >/dev/null
	curl -fsSL "https://pkgs.tailscale.com/stable/debian/${DEBIAN_DISTRO}.tailscale-keyring.list" | sudo tee /etc/apt/sources.list.d/tailscale.list

	# Update and install - but don't enable

	apt-get update
	apt-get install -y zerotier-one tailscale
	systemctl disable tailscaled
	systemctl disable zerotier-one

	# If we are armbian, we do something with networking
	if [ "$BASE_DISTRO" = "armbian" ] ; then
		apt-get install -y network-manager net-tools

		echo "127.0.0.1 adsb-feeder.local" >> /etc/hosts

		# ensure that we get predictable interface names
		echo "extraargs=net.ifnames=0" >> /boot/armbianEnv.txt

		sed -i 's/Wants=network-online.target/Wants=network-pre.target/;s/After=network.target network-online.target/Before=wpa_supplicant.service network.target network-online.target/' /usr/lib/systemd/system/armbian-firstrun-config.service
		systemctl enable armbian-firstrun-config
	fi

	# Enable services at boot
	systemctl enable adsb-setup.service
	systemctl enable adsb-docker.service
	systemctl enable adsb-bootstrap.service
	systemctl enable adsb-update.timer

	# Disable some things we don't need and that only eat memory (assuming they exist)
	systemctl disable bluetooth.service || true
	systemctl disable ModemManager.service || true

else
	# so this is DietPi based. Set up their way of installing stuff
	echo "AUTO_SETUP_INSTALL_SOFTWARE_ID=134 # docker compose and docker" >> /boot/dietpi.txt
	echo "AUTO_SETUP_INSTALL_SOFTWARE_ID=58  # tailscale" >> /boot/dietpi.txt
	echo "AUTO_SETUP_INSTALL_SOFTWARE_ID=201 # zerotier" >> /boot/dietpi.txt

	# Install dependencies
	apt-get update

	# Enable services
	systemctl enable adsb-setup.service
	systemctl enable adsb-bootstrap.service
	systemctl enable adsb-update.timer
fi
# finally, remove the service used for the app and not the image and create a
# flag file as indicator that this is a complete ADS-B Feeder Image, and not
# just the app running on a different OS.
rm /usr/lib/systemd/system/adsb-nonimage.service
touch /opt/adsb/os.adsb.feeder.image

